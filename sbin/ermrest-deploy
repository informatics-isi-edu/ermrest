#!/bin/bash

# 
# Copyright 2012-2019 University of Southern California
# 
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# 
#    http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

if [[ $# -gt 0 ]]
then
    # allow VAR=value args to be passed on command-line
    if [[ -x /usr/bin/env ]]
    then
	exec /usr/bin/env "$@" "$0"
    else
	echo could not find 'env'
	exit 1
    fi
fi

# paths set for installation
HTTPCONFDIR=${HTTPCONFDIR:-/etc/httpd/conf.d}
HTTPDGRP=${HTTPDGRP:-apache}

SU=su

# named parameters that can be set by caller or on command-line above to override defaults...

DEPLOYLOCK="${DEPLOYLOCK}"          # deploy mutual-exclusion marker, if non-empty

PGADMIN="${PGADMIN:-postgres}"
DAEMONUSER="${DAEMONUSER:-ermrest}" # Unix and DB user name for service daemon doing DDL

# make these available to child processes
export PGADMIN
export DAEMONUSER

TMP_SQL=$(mktemp /tmp/ermrest-deploy.sql.XXXXX)

cleanup()
{
    rm -f ${TMP_SQL}
}

trap cleanup 0

error()
{
    cat >&2 <<EOF
error: $*
EOF
    exit 1
}

# make sure we're not in the source tree since we want to use installed ermrest package in Python calls below...
cd /

id ${DAEMONUSER} || useradd -m -r ${DAEMONUSER} || error could not create daemon user ${DAEMONUSER}

usermod -a -G ${HTTPDGRP} ${DAEMONUSER} || error could not add user ${DAEMONUSER} to ${HTTPDGRP} group

chmod og+rx /home/${DAEMONUSER} || error could not set ownership of /home/${DAEMONUSER}

pgid()
{
    line=$($SU -c "psql -q -t -A -c \"select * from pg_roles where rolname = '$1'\"" - "${PGADMIN}")
    status=$?
    [[ $status -eq 0 ]] || return $status
    [[ -n "$line" ]] || return 1
    echo "$line"
    return 0
}

pgcreateuser()
{
    $SU -c "createuser $*" - ${PGADMIN}
}

pgid ${DAEMONUSER} || pgcreateuser -d -R -S ${DAEMONUSER} || error could not create postgres role ${DAEMONUSER}
$SU -c "psql -c 'grant webauthn to ermrest'" - ${PGADMIN} || error could not grant webauthn role to ermrest role

if [[ -r /etc/redhat-release ]]
then
    SEMANAGE_HTTPD_SYS_CONTENT_T=httpd_sys_content_t
    
    semanage fcontext --add --ftype d --type "${SEMANAGE_HTTPD_SYS_CONTENT_T}" "/home/${DAEMONUSER}"
    semanage fcontext --add --type "${SEMANAGE_HTTPD_SYS_CONTENT_T}" "/home/${DAEMONUSER}/ermrest_config.json"
    restorecon -v /home/${DAEMONUSER}
    setsebool -P httpd_enable_homedirs on
fi

if [[ ! -r ${HTTPCONFDIR}/wsgi_ermrest.conf ]]
then
    # install default config
    /usr/bin/python3 -c 'import ermrest as m; m.sample_httpd_config();' \
	> ${HTTPCONFDIR}/wsgi_ermrest.conf \
	|| error could not create ${HTTPCONFDIR}/wsgi_ermrest.conf
fi

pgdbid()
{
    line=$($SU -c "psql -q -t -A -c \"select * from pg_database where datname = '$1'\"" - ${PGADMIN})
    status=$?
    [[ $status -eq 0 ]] || return $status
    [[ -n "$line" ]] || return 1
    echo "$line"
    return 0
}

pg_redeploy_registry_sql()
{
    cat <<EOF
\set ON_ERROR_STOP on
EOF
    $SU -c "/usr/bin/python3 -c 'import ermrest.sql.util as m; m.print_redeploy_registry_sql();'" - ${DAEMONUSER} \
	|| error could not generate registry redeployment SQL
}

pg_redeploy_catalogs_sql()
{
    cat <<EOF
\set ON_ERROR_STOP on
EOF
    $SU -c "/usr/bin/python3 -c 'import ermrest.sql.util as m; m.print_redeploy_catalogs_sql();'" - ${DAEMONUSER} \
	|| error could not generate catalog redeployment SQL
}

pg_extupgrade_sql()
{
    cat <<EOF
\set ON_ERROR_STOP on
EOF
    $SU -c "/usr/bin/python3 -c 'import ermrest.sql.util as m; m.print_extupgrade_sql(\"$1\")'" - ${DAEMONUSER} \
	|| error could not generate extension upgrade SQL for database "$1"
}

# prevent overwrites
[[ -r /home/${DAEMONUSER}/ermrest_config.json ]] \
    || /usr/bin/python3 -c 'import ermrest as m; m.sample_config();' > /home/${DAEMONUSER}/ermrest_config.json \
    || error could not create /home/${DAEMONUSER}/ermrest_config.json

chown ${DAEMONUSER} /home/${DAEMONUSER}/ermrest_config.json

# idempotent deploy tasks
pg_extupgrade_sql template1 > ${TMP_SQL}
$SU -c "psql --echo-errors -d template1" - ${PGADMIN} < ${TMP_SQL} || error could not upgrade database template1

if ! pgdbid 'ermrest'
then
    $SU -c "createdb -O \"$DAEMONUSER\" ermrest" - ${PGADMIN} || error could not create database ermrest
fi

pg_redeploy_registry_sql > ${TMP_SQL}
$SU -c "psql --echo-errors ermrest" - ${PGADMIN} < ${TMP_SQL} || error could not deploy registry database

pg_redeploy_catalogs_sql > ${TMP_SQL}
$SU -c "psql --echo-errors" - ${PGADMIN} < ${TMP_SQL} || error could not re-deploy existing catalog databases

cat >&2 <<EOF
ermrest deployment successful.
EOF

exit 0
