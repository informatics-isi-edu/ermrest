#!/bin/sh

# 
# Copyright 2012-2013 University of Southern California
# 
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# 
#    http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

# paths set for installation
VARLIBDIR=/var/lib/ermrest
LIBEXECDIR=/usr/libexec/ermrest
SHAREDIR=/usr/share/ermrest
SBINDIR=/usr/sbin

# named parameters that can be set by caller or on command-line above to override defaults...

DAEMONUSER="${DAEMONUSER:-ermrest}" # Unix and DB user name for service daemon

# make these available to child processes
export PGADMIN
export DAEMONUSER

# for all catalogs, do periodic maintenance of _ermrest version tracking
#  -- at runtime functions insert new versions 
#  -- readers use max() aggregation to find latest
#  -- periodically flush older version info
#  -- this works with postgres MVCC to avoid concurrent update hazards
runuser -c "psql -q -t -A -c \"SELECT descriptor::json->>'dbname' FROM ermrest.simple_registry\" ermrest" - "${DAEMONUSER}" | {
    while read cat_db
    do
	runuser -c "psql -q \"${cat_db}\"" - "${DAEMONUSER}" <<EOF
BEGIN;

-- purge older model versions
DELETE FROM _ermrest.model_version d
WHERE d.snap_txid < (SELECT max(snap_txid) 
                     FROM _ermrest.model_version
                     WHERE snap_txid < txid_snapshot_xmin(txid_current_snapshot())
                    )
;

-- purge older data versions
DELETE FROM _ermrest.data_version d
USING (
  SELECT "schema", "table", max(snap_txid) AS snap_txid
  FROM _ermrest.data_version
  WHERE snap_txid < txid_snapshot_xmin(txid_current_snapshot())
  GROUP BY "schema", "table"
) c
WHERE d."schema" = c."schema"
  AND d."table" =  c."table"
  AND d.snap_txid < c.snap_txid 
;

-- purge orphaned table annotations
DELETE FROM _ermrest.model_table_annotation a
USING (
SELECT a.* 
FROM _ermrest.model_table_annotation a
LEFT OUTER JOIN (
SELECT
  nc.nspname AS table_schema,
  c.relname AS table_name
FROM pg_catalog.pg_class c
JOIN pg_catalog.pg_namespace nc ON (c.relnamespace = nc.oid)
LEFT JOIN pg_catalog.pg_attribute a ON (a.attrelid = c.oid)
WHERE nc.nspname NOT IN ('information_schema', 'pg_catalog', 'pg_toast')
  AND NOT pg_is_other_temp_schema(nc.oid) 
  AND (c.relkind = ANY (ARRAY['r'::"char", 'v'::"char", 'f'::"char"])) 
  AND (pg_has_role(c.relowner, 'USAGE'::text) OR has_column_privilege(c.oid, a.attnum, 'SELECT, INSERT, UPDATE, REFERENCES'::text))
GROUP BY nc.nspname, c.relname, c.relkind, c.oid
) t ON (a.schema_name = t.table_schema AND a.table_name = t.table_name)
WHERE t.table_name IS NULL
) a2
WHERE a.schema_name = a2.schema_name 
  AND a.table_name = a2.table_name
;

-- purge orphaned column annotations
DELETE FROM _ermrest.model_column_annotation a
USING (
SELECT a.*
FROM _ermrest.model_column_annotation a
LEFT OUTER JOIN (
SELECT
  current_database() AS table_catalog,
  nc.nspname AS table_schema,
  c.relname AS table_name,
  c.relkind AS table_kind,
  a.attname::text AS column_name
FROM pg_catalog.pg_attribute a
JOIN pg_catalog.pg_class c ON (a.attrelid = c.oid)
JOIN pg_catalog.pg_namespace nc ON (c.relnamespace = nc.oid)
LEFT JOIN pg_catalog.pg_attrdef ad ON (a.attrelid = ad.adrelid AND a.attnum = ad.adnum)
JOIN pg_catalog.pg_type t ON (t.oid = a.atttypid)
JOIN pg_catalog.pg_namespace nt ON (t.typnamespace = nt.oid)
LEFT JOIN pg_catalog.pg_type bt ON (t.typtype = 'd'::"char" AND t.typbasetype = bt.oid)
LEFT JOIN pg_catalog.pg_namespace nbt ON (bt.typnamespace = nbt.oid)
WHERE nc.nspname NOT IN ('information_schema', 'pg_catalog', 'pg_toast')
  AND NOT pg_is_other_temp_schema(nc.oid) 
  AND a.attnum > 0
  AND NOT a.attisdropped
  AND (c.relkind = ANY (ARRAY['r'::"char", 'v'::"char", 'f'::"char"])) 
  AND (pg_has_role(c.relowner, 'USAGE'::text) OR has_column_privilege(c.oid, a.attnum, 'SELECT, INSERT, UPDATE, REFERENCES'::text))
) c ON (a.schema_name = c.table_schema AND a.table_name = c.table_name AND a.column_name = c.column_name)
WHERE c.column_Name IS NULL
) a2
WHERE a.schema_name = a2.schema_name 
  AND a.table_name = a2.table_name
  AND a.column_name = a2.column_name
;

-- purge orphaned keyref annotations
DELETE FROM _ermrest.model_keyref_annotation a
USING (
SELECT a.*
FROM _ermrest.model_keyref_annotation a
LEFT OUTER JOIN (
  SELECT
    nfk.nspname::information_schema.sql_identifier AS fk_table_schema,
    fkcl.relname::information_schema.sql_identifier AS fk_table_name,
    (SELECT array_agg(fka.attname::text ORDER BY fka.attname::text)
     FROM generate_subscripts(con.conkey, 1) i
     JOIN pg_catalog.pg_attribute fka ON con.conrelid = fka.attrelid AND con.conkey[i.i] = fka.attnum
    ) AS fk_column_names,
    nk.nspname::information_schema.sql_identifier AS uq_table_schema,
    kcl.relname::information_schema.sql_identifier AS uq_table_name,
    (SELECT array_agg(ka.attname::text ORDER BY fka.attname::text)
     FROM generate_subscripts(con.confkey, 1) i
     JOIN pg_catalog.pg_attribute fka ON con.conrelid = fka.attrelid AND con.conkey[i.i] = fka.attnum
     JOIN pg_catalog.pg_attribute ka ON con.confrelid = ka.attrelid AND con.confkey[i.i] = ka.attnum
    ) AS uq_column_names
  FROM pg_namespace ncon
  JOIN pg_constraint con ON ncon.oid = con.connamespace
  JOIN pg_class fkcl ON con.conrelid = fkcl.oid AND con.contype = 'f'::"char"
  JOIN pg_class kcl ON con.confrelid = kcl.oid AND con.contype = 'f'::"char"
  JOIN pg_namespace nfk ON fkcl.relnamespace = nfk.oid
  JOIN pg_namespace nk ON kcl.relnamespace = nk.oid
  WHERE (pg_has_role(kcl.relowner, 'USAGE'::text) 
         OR has_table_privilege(kcl.oid, 'INSERT, UPDATE, DELETE, TRUNCATE, REFERENCES, TRIGGER'::text) OR has_any_column_privilege(kcl.oid, 'INSERT, UPDATE, REFERENCES'::text))
    AND (pg_has_role(fkcl.relowner, 'USAGE'::text) 
         OR has_table_privilege(fkcl.oid, 'INSERT, UPDATE, DELETE, TRUNCATE, REFERENCES, TRIGGER'::text) OR has_any_column_privilege(fkcl.oid, 'INSERT, UPDATE, REFERENCES'::text))
) r ON (a.from_schema_name = r.fk_table_schema AND a.from_table_name = r.fk_table_name AND a.from_column_names = r.fk_column_names
        AND a.to_schema_name = r.uq_table_schema AND a.to_table_name = r.uq_table_Name AND a.to_column_names = r.uq_column_names)
WHERE r.uq_column_names IS NULL
) a2
WHERE a.from_schema_name = a2.from_schema_name
  AND a.from_table_name = a2.from_table_name
  AND a.from_column_names = a2.from_column_names
  AND a.to_schema_name = a2.to_schema_name
  AND a.to_table_name = a2.to_table_name
  AND a.to_column_names = a2.to_column_names
;

COMMIT;
EOF
    done
}

