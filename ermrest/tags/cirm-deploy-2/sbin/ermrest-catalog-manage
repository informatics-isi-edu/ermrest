#!/usr/bin/python

import sys
import json
import ermrest


def usage():
    print """
usage: ermrest-catalog-manage <cmd>...

Run this utility to perform catalog management operations.

  cmd: create                                     (create catalog)
   or: destroy <catalog id>                       (destroy catalog)
   or: init <catalog id>                          (init catalog)
   or: getmeta <catalog id> [<key>]               (get metadata)
   or: addmeta <catalog id> <key> <value>         (add metadata)
   or: removemeta <catalog id> <key> [<value>]    (remove metadata)

Exit status:

  0  for success
  1  for usage error
  2  for entity named in sub-command argument not found
  3  for sub-command not supported by current service configuration

"""

def main(args):
    try:
        if len(args) == 1 and args[0] == 'create':
            print json.dumps(ermrest.catalog_create())
            
        elif len(args) == 2 and args[0] == 'destroy':
            ermrest.catalog_destroy(args[1])
            
        elif len(args) == 2 and args[0] == 'init':
            ermrest.catalog_init_meta(args[1])
            
        elif len(args) == 2 and args[0] == 'getmeta':
            print json.dumps(ermrest.catalog_get_meta(args[1]))
            
        elif len(args) == 3 and args[0] == 'getmeta':
            print json.dumps(ermrest.catalog_get_meta(args[1], args[2]))
            
        elif len(args) == 4 and args[0] == 'addmeta':
            ermrest.catalog_add_meta(args[1], args[2], args[3])
            
        elif len(args) == 3 and args[0] == 'removemeta':
            ermrest.catalog_remove_meta(args[1], args[2])
            
        elif len(args) == 4 and args[0] == 'removemeta':
            ermrest.catalog_remove_meta(args[1], args[2], args[3])
            
        else:
            usage()
            return 1
        
        return 0

    except ValueError, ev:
        print 'error: %s' % str(ev)
        return 2
    
    except KeyError, ev:
        print 'not found: %s' % str(ev)
        return 2

    except NotImplementedError:
        print 'command not supported by current service configuration'
        return 3
        
if __name__ == '__main__':
    sys.exit( main(sys.argv[1:]) )

