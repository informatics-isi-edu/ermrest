#!/usr/bin/python

import sys
import json
import ermrest


def usage():
    print """
usage: ermrest-registry-manage <cmd>...

Run this utility to perform a sub-command to manipulate embedded
registry state of the ermrest service owned by the invoking daemon
user.

  cmd: lookup [<catalog id>]                        (lookup catalog)
   or: register <connection string> [<catalog id>]  (register catalog)
   or: unregister <catalog id>                      (unregister catalog)

Exit status:

  0  for success
  1  for usage error
  2  for entity named in sub-command argument not found
  3  for sub-command not supported by current service configuration

"""

def main(args):
    try:
        if len(args) == 1 and args[0] == 'lookup':
            print_mappings( ermrest.registry_lookup() )
            
        elif len(args) == 2 and args[0] == 'lookup':
            print_mappings( ermrest.registry_lookup(args[1]) )
            
        elif len(args) == 2 and args[0] == 'register':
            descriptor = json.loads(args[1])
            print_mappings( [ ermrest.registry_register(descriptor) ] )
            
        elif len(args) == 3 and args[0] == 'register':
            descriptor = json.loads(args[1])
            print_mappings( [ ermrest.registry_register(descriptor, args[2]) ] )
            
        elif len(args) == 2 and args[0] == 'unregister':
            ermrest.registry_unregister(args[1])
            
        else:
            usage()
            return 1
        return 0

    except ValueError, ev:
        print 'error: %s' % str(ev)
        return 2
    
    except KeyError, ev:
        print 'not found: %s' % str(ev)
        return 2

    except NotImplementedError:
        print 'command not supported by current service configuration'
        return 3

def print_mappings(mappings):
    for mapping in mappings:
        print "%(id)s: %(descriptor)s" % mapping
        
if __name__ == '__main__':
    sys.exit( main(sys.argv[1:]) )

